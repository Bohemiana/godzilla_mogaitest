/*
 * Decompiled with CFR 0.153-SNAPSHOT (d6f6758-dirty).
 */
package org.bouncycastle.crypto.engines;

import org.bouncycastle.crypto.BlockCipher;
import org.bouncycastle.crypto.CipherParameters;
import org.bouncycastle.crypto.DataLengthException;
import org.bouncycastle.crypto.OutputLengthException;
import org.bouncycastle.crypto.params.KeyParameter;

public class SEEDEngine
implements BlockCipher {
    private final int BLOCK_SIZE = 16;
    private static final int[] SS0 = new int[]{696885672, 92635524, 382128852, 331600848, 340021332, 487395612, 747413676, 621093156, 491606364, 0x3434340, 0x18081018, 504238620, 289493328, 1020063996, 181060296, 591618912, 0x28082028, 0x4444044, 0x20002020, 495817116, 549511392, 583197408, 0x8C8C0C8, 386339604, 629514660, 261063564, 0x3030300, 994800504, 0x3B8BB3B8, 0x13031310, 314757840, 0x2ECEE2EC, 809529456, 0xC8C808C, 1057960764, 680042664, 0x32023230, 0x1DCDD1DC, 919007988, 876900468, 751624428, 361075092, 185271048, 390550356, 474763356, 457921368, 1032696252, 0x1010100, 0x24042024, 0x1C0C101C, 860058480, 411603096, 0x10001010, 0xCCCC0CC, 851636976, 432656856, 0x2C0C202C, 667411428, 843215472, 0x3838380, 462132120, 297914832, 109478532, 164217288, 541089888, 272650320, 595829664, 734782440, 218956044, 914797236, 512660124, 256852812, 931640244, 441078360, 113689284, 944271480, 646357668, 0x12021210, 797942700, 365285844, 557932896, 0x3C3C3C0, 881111220, 0x1414140, 306336336, 1028485500, 227377548, 0x8080008, 521081628, 0x19899198, 0, 420024600, 0x4040004, 323179344, 935850996, 566354400, 1036907004, 910586484, 789521196, 654779172, 813740208, 0xB8B8388, 235799052, 730571688, 578986656, 776888940, 327390096, 223166796, 692674920, 1011642492, 151585032, 168428040, 1066382268, 802153452, 868479984, 96846276, 126321540, 0x14041014, 1053750012, 608460900, 516870876, 772678188, 189481800, 436867608, 101057028, 0x21012120, 726360936, 0x26466264, 0x2020200, 902164980, 310547088, 0xA8A8288, 0xC0C000C, 864269232, 1045328508, 281071824, 977957496, 0x7474344, 377918100, 633725412, 637936164, 0x808080, 764256684, 533713884, 562143648, 0x30003030, 923218740, 781099692, 906375732, 352653588, 0x22022220, 0x38083038, 885321972, 663200676, 0x5454144, 0xC4C404C, 0x1818180, 701096424, 0x4848084, 394761108, 889532724, 197903304, 0xECEC2CC, 0x3C0C303C, 826372464, 0x11011110, 130532292, 0x9898188, 893743476, 1003222008, 449499864, 952692984, 344232084, 424235352, 0x2828280, 0x4C4C0C4, 0x3FCFF3FC, 155795784, 956903736, 658989924, 0xC0C0C0, 0xFCFC3CC, 398971860, 948482232, 252642060, 244220556, 0x2424240, 0x23032320, 293704080, 743202924, 466342872, 612671652, 0x34043034, 834793968, 0x8484048, 0x2C2C2C0, 793731948, 1024274748, 755835180, 0x404040, 1049539260, 1041117756, 1015853244, 0x1C1C1C0, 0x2A8AA2A8, 982168248, 240009804, 0x15455154, 990589752, 483184860, 675831912, 1062171516, 478974108, 415813848, 172638792, 373707348, 0x37477374, 545300640, 768467436, 0x6464244, 897954228, 722150184, 625303908, 986379000, 600040416, 965325240, 830583216, 529503132, 508449372, 969535992, 650568420, 847426224, 0x31013130, 717939432, 760045932, 525292380, 616882404, 817950960, 0xDCDC1CC, 0x8888088, 369496596, 973746744, 407392344, 348442836, 574775904, 688464168, 117900036, 0x33033330, 684253416, 453710616, 84214020, 961114488, 276861072, 709517928, 705307176, 445289112};
    private static final int[] SS1 = new int[]{0x38380830, -399980320, 741149985, -1540979038, -871379005, -601960750, -1338801229, -1204254544, -1406169181, 1612726368, 0x54154551, -1006123069, 0x44044440, 1815039843, 1747667811, 1478183763, -1073495101, 1612857954, 0x30330333, -1271560783, 673777953, -1608482656, -534592798, -1540913245, -804011053, -1877900911, 0x10110111, 67503618, 0x1C1C0C10, -1136882512, 875955762, 1208699715, -332410909, -2012706688, 1814842464, -1473738592, 337053459, -1006320448, 336987666, -197868304, -1073560894, 1141196097, -534658591, -736704814, 1010765619, 1010634033, -1945203070, -1743222640, 0x28280820, 1276005954, -197736718, 1010699826, -1541044831, -130430479, 202181889, -601894957, -669464368, 673909539, 0x64264662, 2017086066, 606537507, 741281571, -265174543, 1882342002, 0x40024242, -736836400, 0x40014141, -1073692480, 1882407795, 1680295779, -1406366560, -2012509309, -197670925, -1406300767, -2147450752, 471797523, -938816830, 0x2C2C0C20, -1473607006, 0x34340430, -804076846, 134941443, -332476702, -399914527, 1545424209, -1810594672, 0x18180810, -130496272, 1410811731, -1406234974, 0x8080800, -1006254655, 0x10130313, -871510591, -2079947134, -1204188751, -62926861, 2084392305, -1073626687, 0x30310131, -197802511, -2012575102, 1747602018, -1338932815, -804142639, 0x20200020, -736639021, 131586, 0x20220222, 0x4040400, 1747470432, 1882276209, 67569411, -669266989, -1675784815, -1743156847, 1612792161, -1136750926, -467220766, 1478052177, -602026543, 1343308113, -1877966704, -602092336, -1743091054, -1608285277, -1473541213, -804208432, -2147384959, 202313475, 1141327683, 404359698, -534527005, -332608288, -1945268863, -1136685133, -1810463086, 2017151859, 1545358416, -1608351070, -1608416863, 1612923747, 0x20230323, 1275940161, -938948416, -1675719022, -1675850608, 943327794, 0xC0C0C00, 741215778, -1204122958, 1814974050, -1675653229, 1478117970, -265108750, -1877835118, -265042957, 1208568129, 2016954480, -871576384, 336921873, -130298893, 1882210416, 1949648241, 2084523891, 875889969, 0x10100010, 197379, 1680098400, 1814908257, -1006188862, 1949582448, -736770607, -1271626576, -399848734, 134809857, 1949714034, 404293905, -62992654, 0x40004040, 0x10120212, -534724384, -1136816719, 67437825, -130364686, 65793, -265240336, 673843746, 1545490002, -1473672799, 1410745938, 0x40034343, -2080012927, 0x14140410, -2012640895, -1743025261, -1338998608, -467286559, 0x48084840, 2017020273, -1810397293, -63124240, 471731730, -2147319166, 0x20210121, -1945334656, 404425491, 1545555795, 0x74374773, 1410614352, -1338867022, 471665937, 606405921, 1276071747, 0, 1141261890, -332542495, 1477986384, 1343373906, -399782941, 2084458098, -669332782, -938882623, -63058447, 0x30300030, -1810528879, 1680164193, 0x3C3C0C30, -1271494990, -467352352, -1204057165, 2084326512, 202247682, 1343242320, 943262001, 606471714, 0x30320232, -2080078720, 1747536225, -1877769325, 876021555, -467154973, 0x24240420, -1541110624, -938751037, 1343439699, 134875650, -2079881341, -669398575, 0x4C0C4C40, -2147253373, -1945137277, -871444798, 943393587, 1208633922, -1271429197};
    private static final int[] SS2 = new int[]{-1582814839, -2122054267, -757852474, -741338173, 1347687492, 287055117, -1599329140, 556016901, 1364991309, 0x43400343, 0x10181808, 303832590, 1364201793, -251904820, -1027077430, 1667244867, 0x20282808, 0x40440444, 0x20202000, -1852039795, -522182464, -488627518, -1060632376, 320083719, -1583078011, -2087972977, 0x3000303, 1937259339, -1279771765, 0x13101303, -758115646, -487838002, 1886400576, -2138305396, 859586319, -1599592312, 0x32303202, -774103603, -218876218, 1886663748, -521392948, -1852566139, 50858763, 1398019911, 1348213836, 1398283083, -1313063539, 0x1000101, 0x20242404, 0x101C1C0C, 1936732995, -1869080440, 0x10101000, -1060369204, -219139390, -774366775, 0x202C2C0C, -471586873, 1919955522, -2088762493, -1818748021, -774893119, -2105276794, -1043854903, 1616912448, 1347424320, -1549786237, -471323701, 17566989, -1296812410, -1835262322, 1129058127, -1280034937, 1381505610, -1027340602, 1886926920, -1566300538, 0x12101202, -1548996721, -774629947, 1633689921, -1010826301, -1330367356, 0x41400141, 1380979266, 1903967565, -2121527923, 526344, 320610063, -1852302967, 0, 286791945, 263172, 1397756739, -202098745, -505404991, -235127347, 1920218694, 590098191, 589571847, -1330630528, -2088236149, 34344462, -1549259893, -1566563710, 1651256910, -1819274365, 1095503181, 1634216265, 1887190092, 17303817, 34081290, -1279508593, -471060529, -202361917, -1044118075, -2088499321, 0x10141404, -218349874, 1617175620, -757326130, 573320718, 1128794955, 303569418, 33818118, 0x21202101, 1667771211, 0x62642646, 0x2000202, -235653691, -1836051838, -2105013622, 789516, -1280298109, 1920745038, -791670592, 1920481866, 1128531783, -1835788666, -505141819, 572794374, -2139094912, -1582551667, -740548657, -1583341183, 0x30303000, 859059975, -1565774194, 842282502, 286528773, 0x22202202, 0x30383808, -252431164, -1549523065, 1094976837, 0x404C0C4C, -2122317439, -504878647, -2138831740, -1819011193, 825505029, -1010299957, -1026814258, 0x303C3C0C, 1903178049, 0x11101101, -1010563129, -2121791095, 1903441221, -201835573, -757589302, -252167992, -1869343612, 1364728137, -2105539966, -1060895548, -201572401, 1095240009, 825768201, 1667508039, -1061158720, -1010036785, -741075001, -1330104184, 51121935, -2104750450, 0x42400242, 0x23202303, -1852829311, 1617701964, -740811829, -1599855484, 0x30343404, -235916863, 0x40480848, -1027603774, 1668034383, 826031373, 556543245, 0x40400040, -1296286066, 842808846, -1329841012, -1044381247, -1566037366, -1296549238, 1112280654, 0x51541545, 859323147, -790881076, 1617438792, 1937522511, -1868817268, -791144248, 1112017482, 1381242438, 0x73743747, -1600118656, -504615475, 1111754310, -1313589883, 589835019, 1633953093, -218613046, -471850045, -1313326711, -1313853055, -1818484849, 1381768782, -235390519, -488364346, -1297075582, 0x31303101, -488101174, 1634479437, 1398546255, -521919292, -252694336, -1043591731, -2138568568, 303306246, 842545674, 1347950664, -791407420, 1650467394, 556280073, 50595591, 0x33303303, -521656120, 320346891, 17040645, 1903704393, -1869606784, 1650993738, 573057546, -1835525494};
    private static final int[] SS3 = new int[]{0x8303838, -924784600, 220277805, -2036161498, -809251825, -825041890, -2085375949, -2001684424, -1885098961, 1080057888, 0x45515415, -943471609, 0x44404404, 1331915823, 1264805931, 1263753243, -1010581501, 1113743394, 0x3333033, -2051951563, 153167913, -2136956896, -1025318878, -2019318745, -1009528813, -2121166831, 0x1111011, 100795398, 0xC101C1C, -1934574532, 103953462, 1262700555, -807146449, -2004842488, 1281387564, -2002737112, 118690839, -993999868, 101848086, -990841804, -1027424254, 1161905157, -1042161631, -959261674, 0xF333C3F, 221330493, -1904047090, -2003789800, 0x8202828, 1312967694, -957156298, 238173246, -2053004251, -906889159, 218172429, -808199137, -925837288, 186853419, 0x46626426, 1249015866, 119743527, 253963311, -1041108943, 1114796082, 0x42424002, -992947180, 0x41414001, -1061109760, 1131638835, 1197696039, -1935627220, -1954314229, -940313545, -1918784467, -2139062272, 252910623, -893204470, 0xC202C2C, -1969051606, 0x4303434, -1026371566, 184748043, -823989202, -907941847, 1297177629, -2070899692, 0x8101818, -923731912, 1196643351, -1901941714, 0x8000808, -977157115, 0x3131013, -842937331, -2038266874, -1984841671, -806093761, 1299283005, -1044267007, 0x1313031, -973999051, -1971156982, 1247963178, -2119061455, -1043214319, 0x202020, -942418921, 0x2020002, 0x2222022, 0x4000404, 1214277672, 1097953329, 117638151, -875309029, -1919837155, -1986947047, 1096900641, -1900889026, -958208986, 1230067737, -841884643, 1095847953, -2138009584, -858727396, -1970104294, -2086428637, -1952208853, -1060057072, -2122219519, 251857935, 1195590663, 168957978, -1008476125, -857674708, -1920889843, -1884046273, -2037214186, 1265858619, 1280334876, -2103271390, -2120114143, 1130586147, 0x3232023, 1296124941, -926889976, -1902994402, -1936679908, 171063354, 0xC000C0C, 0xE222C2E, -1967998918, 1315073070, -1886151649, 1246910490, -1024266190, -2104324078, -1007423437, 1229015049, 1215330360, -859780084, 0x5111415, -873203653, 1081110576, 1165063221, 1332968511, 87110709, 0x101010, 0x3030003, 1147167780, 1298230317, -960314362, 1148220468, -976104427, -2068794316, -891099094, 151062537, 1181905974, 0x9111819, -822936514, 0x40404000, 0x2121012, -1059004384, -1917731779, 83952645, -890046406, 0x1010001, -1057951696, 0xA22282A, 1314020382, -1985894359, 1179800598, 0x43434003, -2055109627, 0x4101414, -1987999735, -1953261541, -2135904208, -975051739, 0x48404808, 1232173113, -2020371433, -856622020, 236067870, -2105376766, 0x1212021, -1937732596, 185800731, 1330863135, 0x47737437, 1146115092, -2102218702, 0xD111C1D, 86058021, 1329810447, 0, 1178747910, -840831955, 1213224984, 1112690706, -874256341, 1316125758, -892151782, -910047223, -839779267, 0x303030, -2054056939, 1164010533, 0xC303C3C, -2035108810, -991894492, -1951156165, 1282440252, 235015182, 1079005200, 154220601, 0x6222426, 0x2323032, -2071952380, 1231120425, -2087481325, 0x7333437, -941366233, 0x4202424, -2069847004, -876361717, 1129533459, 167905290, -2021424121, -908994535, 0x4C404C0C, -2088534013, -1887204337, -826094578, 0xB33383B, 1245857802, -2018266057};
    private static final int[] KC = new int[]{-1640531527, 1013904243, 2027808486, -239350324, -478700647, -957401293, -1914802585, 465362127, 930724254, 1861448508, -572070280, -1144140559, 2006686179, -281594938, -563189875, -1126379749};
    private int[] wKey;
    private boolean forEncryption;

    public void init(boolean bl, CipherParameters cipherParameters) throws IllegalArgumentException {
        this.forEncryption = bl;
        this.wKey = this.createWorkingKey(((KeyParameter)cipherParameters).getKey());
    }

    public String getAlgorithmName() {
        return "SEED";
    }

    public int getBlockSize() {
        return 16;
    }

    public int processBlock(byte[] byArray, int n, byte[] byArray2, int n2) throws DataLengthException, IllegalStateException {
        if (this.wKey == null) {
            throw new IllegalStateException("SEED engine not initialised");
        }
        if (n + 16 > byArray.length) {
            throw new DataLengthException("input buffer too short");
        }
        if (n2 + 16 > byArray2.length) {
            throw new OutputLengthException("output buffer too short");
        }
        long l = this.bytesToLong(byArray, n + 0);
        long l2 = this.bytesToLong(byArray, n + 8);
        if (this.forEncryption) {
            for (int i = 0; i < 16; ++i) {
                long l3 = l2;
                l2 = l ^ this.F(this.wKey[2 * i], this.wKey[2 * i + 1], l2);
                l = l3;
            }
        } else {
            for (int i = 15; i >= 0; --i) {
                long l4 = l2;
                l2 = l ^ this.F(this.wKey[2 * i], this.wKey[2 * i + 1], l2);
                l = l4;
            }
        }
        this.longToBytes(byArray2, n2 + 0, l2);
        this.longToBytes(byArray2, n2 + 8, l);
        return 16;
    }

    public void reset() {
    }

    private int[] createWorkingKey(byte[] byArray) {
        int[] nArray = new int[32];
        long l = this.bytesToLong(byArray, 0);
        long l2 = this.bytesToLong(byArray, 8);
        int n = this.extractW0(l);
        int n2 = this.extractW1(l);
        int n3 = this.extractW0(l2);
        int n4 = this.extractW1(l2);
        for (int i = 0; i < 16; ++i) {
            nArray[2 * i] = this.G(n + n3 - KC[i]);
            nArray[2 * i + 1] = this.G(n2 - n4 + KC[i]);
            if (i % 2 == 0) {
                l = this.rotateRight8(l);
                n = this.extractW0(l);
                n2 = this.extractW1(l);
                continue;
            }
            l2 = this.rotateLeft8(l2);
            n3 = this.extractW0(l2);
            n4 = this.extractW1(l2);
        }
        return nArray;
    }

    private int extractW1(long l) {
        return (int)l;
    }

    private int extractW0(long l) {
        return (int)(l >> 32);
    }

    private long rotateLeft8(long l) {
        return l << 8 | l >>> 56;
    }

    private long rotateRight8(long l) {
        return l >>> 8 | l << 56;
    }

    private long bytesToLong(byte[] byArray, int n) {
        long l = 0L;
        for (int i = 0; i <= 7; ++i) {
            l = (l << 8) + (long)(byArray[i + n] & 0xFF);
        }
        return l;
    }

    private void longToBytes(byte[] byArray, int n, long l) {
        for (int i = 0; i < 8; ++i) {
            byArray[i + n] = (byte)(l >> (7 - i) * 8);
        }
    }

    private int G(int n) {
        return SS0[n & 0xFF] ^ SS1[n >> 8 & 0xFF] ^ SS2[n >> 16 & 0xFF] ^ SS3[n >> 24 & 0xFF];
    }

    private long F(int n, int n2, long l) {
        int n3 = (int)(l >> 32);
        int n4 = (int)l;
        int n5 = this.phaseCalc2(n3, n, n4, n2);
        int n6 = n5 + this.phaseCalc1(n3, n, n4, n2);
        return (long)n6 << 32 | (long)n5 & 0xFFFFFFFFL;
    }

    private int phaseCalc1(int n, int n2, int n3, int n4) {
        return this.G(this.G(n ^ n2 ^ (n3 ^ n4)) + (n ^ n2));
    }

    private int phaseCalc2(int n, int n2, int n3, int n4) {
        return this.G(this.phaseCalc1(n, n2, n3, n4) + this.G(n ^ n2 ^ (n3 ^ n4)));
    }
}

